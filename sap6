Aplicația 6.1: Să se modifice exemplul 2 astfel încât funcția err să încapsuleze și condiția de eroare. Pentru
aceasta, ea primește în plus pe prima poziție o variabilă de tip int care reprezintă o valoare logică. Dacă valoarea
este true, se va executa err ca în exemplu, altfel err nu va avea niciun efect.
Exemplu de folosire: err(n<=0||n>100,"n invalid: %d\n",n); // fără if în față, deoarece err încapsulează condiția

#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>

void err(int condition, const char *fmt, ...) {
    if (condition) {
        va_list va;
        va_start(va, fmt);
        fprintf(stderr, "eroare: ");
        vfprintf(stderr, fmt, va);
        va_end(va);
        fputc('\n', stderr);
        exit(EXIT_FAILURE);
    }
}

int main() {
    int i, n;
    float x, y, e, min, max;
    
    printf("n="); scanf("%d", &n);
    err(n <= 0 || n > 100, "n invalid: %d\n", n);

    printf("x="); scanf("%f", &x);
    printf("y="); scanf("%f", &y);
    err(x >= y, "x=%g nu este mai mic decat y=%g\n", x, y);

    max = x;
    min = y;
    for (i = 0; i < n; i++) {
        printf("e="); scanf("%f", &e);
        err(e < x || e > y, "element invalid: %g\n", e);
        if (e < min) min = e;
        if (e > max) max = e;
    }
    printf("min: %g, max: %g\n", min, max);
    return 0;
}

Aplicația 6.2: Să se scrie o funcție float *allocVec(int n,...) care primește pe prima poziție un număr de elemente
iar apoi n elemente reale. Funcția va aloca dinamic un vector de tip float în care va depune toate elementele.
Exemplu: allocVec(3,7.2,-1,0) => {7.2, -1, 0}


#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>

float* allocVec(int n, ...) {
    
    float* vec = (float*)malloc(n * sizeof(float));
    if (vec == NULL) {
        fprintf(stderr, "Eroare la alocarea memoriei.\n");
        exit(EXIT_FAILURE);
    }

    va_list args;
    va_start(args, n);

    
    for (int i = 0; i < n; i++) {
        vec[i] = (float)va_arg(args, double); 
    }

    va_end(args);

    return vec;
}

int main() {
    int n = 3;
    float* vec = allocVec(n, 7.2, -1.0, 0.0);

    for (int i = 0; i < n; i++) {
        printf("%f ", vec[i]);
    }
    printf("\n");

    free(vec);

    return 0;
}

Aplicația 6.3: Să se scrie o funcție absN(int n,...) care primește un număr n de adrese de tip float și setează la
fiecare dintre aceste adrese valoarea absolută de la acea locație.
Exemplu: absN(2,&x,&y); // echivalent cu x=fabs(x); y=fabs(y);

#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <math.h>

void absN(int n, ...) {
    va_list args;
    va_start(args, n);

    for (int i = 0; i < n; i++) {
        float* p = va_arg(args, float*);
        *p = fabs(*p);
    }

    va_end(args);
}

int main() {
    float x = -5.5, y = 3.2, z = -7.8;

    printf("Before: x = %f, y = %f, z = %f\n", x, y, z);

    absN(3, &x, &y, &z);

    printf("After: x = %f, y = %f, z = %f\n", x, y, z);

    return 0;
}

Aplicația 6.4: Să se scrie o funcție crescator(int n,char tip,...) care primește un număr n de valori și returnează 1
dacă ele sunt în ordine strict crescătoare, altfel 0. Caracterul tip indică tipul valorilor și poate fi ‘d’ - int, ‘f’ - double.
Exemplu: printf(“%d”,crescator(3,’d’,-1,7,9));

#include <stdio.h>
#include <stdarg.h>

int crescator(int n, char tip, ...) {
    va_list args;
    va_start(args, tip);

    if (tip == 'd') {
        int prev = va_arg(args, int);
        for (int i = 1; i < n; i++) {
            int current = va_arg(args, int);
            if (current <= prev) {
                va_end(args);
                return 0;
            }
            prev = current;
        }
    } else if (tip == 'f') {
        double prev = va_arg(args, double);
        for (int i = 1; i < n; i++) {
            double current = va_arg(args, double);
            if (current <= prev) {
                va_end(args);
                return 0;
            }
            prev = current;
        }
    } else {
        va_end(args);
        return 0; // Tip necunoscut
    }

    va_end(args);
    return 1;
}

int main() {
    printf("%d\n", crescator(3, 'd', -1, 7, 9)); // returneze 1
    printf("%d\n", crescator(3, 'd', 3, 3, 5)); //returneze 0
    printf("%d\n", crescator(3, 'f', 1.1, 2.2, 3.3)); //returneze 1
    printf("%d\n", crescator(3, 'f', 1.1, 2.2, 2.0)); //returneze 0
    return 0;
}

Aplicația 6.5: Să se implementeze o funcție input(const char *fmt,...). În șirul fmt pot fi caractere obișnuite (orice
în afară de %) și placeholdere (% urmat de o literă). Pentru fiecare placeholder posibil ( %d - int, %f -float, %c -
char ), în lista de argumente variabile se va afla adresa unei variabile de tipul corespunzător. Funcția afișează pe
ecran caracterele obișnuite și citește de la tastatură pentru placeholdere.
Exemplu: input(”n=%dch=%c”,&n,&ch); // citește o valoare de tip int în n și de tip char în ch

#include <stdio.h>
#include <stdarg.h>

void input(const char *fmt, ...) {
    va_list args;
    va_start(args, fmt);

    while (*fmt) {
        if (*fmt == '%') {
            fmt++;
            switch (*fmt) {
                case 'd': {
                    int *int_ptr = va_arg(args, int*);
                    scanf("%d", int_ptr);
                    break;
                }
                case 'f': {
                    float *float_ptr = va_arg(args, float*);
                    scanf("%f", float_ptr);
                    break;
                }
                case 'c': {
                    char *char_ptr = va_arg(args, char*);
                    while ((getchar()) != '\n');
                    *char_ptr = getchar();
                    break;
                }
                default:
                    break;
            }
        } else {
            putchar(*fmt);
        }
        fmt++;
    }

    va_end(args);
}

int main() {
    int n;
    float f;
    char ch;

    printf("Introduceți valorile:\n");
    input("n=%d f=%f ch=%c", &n, &f, &ch);

    printf("Valori citite: n=%d, f=%f, ch=%c\n", n, f, ch);

    return 0;
}

Aplicația 6.6: Să se scrie o funcție char *concat(int n,...) care primește un număr de șiruri de caractere și apoi
șirurile propriu-zise. Funcția va concatena într-un nou șir, alocat dinamic, conținuturile tuturor șirurilor date, cu câte
un spațiu între ele și va returna acest șir.
Exemplu: concat(3,”Ion”,”si”,”Ana”) => “Ion si Ana”

#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <string.h>

char *concat(int n, ...) {
    va_list args;
    va_start(args, n);

    int total_length = 0;
    for (int i = 0; i < n; i++) {
        const char *str = va_arg(args, const char*);
        total_length += strlen(str);
    }
    total_length += (n - 1);

    char *result = (char *)malloc(total_length + 1);
    if (result == NULL) {
        va_end(args);
        return NULL;
    }

    va_start(args, n);
    char *ptr = result;
    for (int i = 0; i < n; i++) {
        const char *str = va_arg(args, const char*);
        while (*str) {
            *ptr++ = *str++;
        }
        if (i < n - 1) {
            *ptr++ = ' ';
        }
    }
    *ptr = '\0';

    va_end(args);
    return result;
}

int main() {
    char *result = concat(3, "Ion", "si", "Ana");
    if (result != NULL) {
        printf("%s\n", result);
        free(result);
    }
    return 0;
}

Aplicația 6.7: Să se scrie o funcție int comune(int nVec,...) care primește un număr de vectori cu valori de tip int și
vectorii propriu-ziși. Fiecare vector se dă prin 2 argumente: un pointer la elementele sale și dimensiunea. Funcția
va returna numărul de elemente comune care se regăsesc în toți vectorii.
Exemplu: comune(3,v1,2,v2,3,v3,3) => returnează 2 pentru v1={5,8}, v2={8,3,5}, v3={5,0,8}

#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>

int comune(int nVec, ...) {
    va_list args;
    va_start(args, nVec);

    int max_value = 1000;
    int *freq = (int *)calloc(max_value + 1, sizeof(int));

    int *first_vec = va_arg(args, int*);
    int first_vec_size = va_arg(args, int);
    for (int i = 0; i < first_vec_size; i++) {
        freq[first_vec[i]] = 1;
    }

    for (int i = 1; i < nVec; i++) {
        int *vec = va_arg(args, int*);
        int vec_size = va_arg(args, int);

        int *current_freq = (int *)calloc(max_value + 1, sizeof(int));
        for (int j = 0; j < vec_size; j++) {
            if (freq[vec[j]] == i) {
                current_freq[vec[j]] = 1;
            }
        }

        for (int j = 0; j <= max_value; j++) {
            if (current_freq[j] == 1) {
                freq[j]++;
            }
        }

        free(current_freq);
    }

    int common_count = 0;
    for (int i = 0; i <= max_value; i++) {
        if (freq[i] == nVec) {
            common_count++;
        }
    }

    free(freq);
    va_end(args);
    return common_count;
}

int main() {
    int v1[] = {5, 8};
    int v2[] = {8, 3, 5};
    int v3[] = {5, 0, 8};
    int result = comune(3, v1, 2, v2, 3, v3, 3);
    printf("Numărul de elemente comune: %d\n", result);
    return 0;
}

Aplicația 6.8: Să se scrie o funcție sortare(int n,...) care pe prima poziție are numărul de elemente de sortat, iar
pe următoarele poziții n adrese de valori de tip int. Funcția va sorta crescător valorile de la adresele date.
Exemplu: sortare(3,&i,&j,&k); // sortează crescător valorile lui i, j și k

#include <stdio.h>
#include <stdarg.h>

void sortare(int n, ...) {
    va_list args;
    va_start(args, n);

    int *ptr_array[n];

    for (int i = 0; i < n; i++) {
        ptr_array[i] = va_arg(args, int*);
    }

    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (*ptr_array[j] > *ptr_array[j + 1]) {
                int *temp = ptr_array[j];
                ptr_array[j] = ptr_array[j + 1];
                ptr_array[j + 1] = temp;
            }
        }
    }

    va_end(args);
}

int main() {
    int i = 5, j = 2, k = 7;

    printf("Inainte de sortare: i=%d, j=%d, k=%d\n", i, j, k);
    sortare(3, &i, &j, &k);
    printf("Dupa sortare: i=%d, j=%d, k=%d\n", i, j, k);

    return 0;
}

Aplicația 6.9: Scrieți un program care calculează suma parametrilor primiți din linia de comandă (numere reale).
Exemplu: execuția fără parametri va fișa 0, iar execuția cu parametrii 1.1 6.57 99.122 va afișa 106.792


#include <stdio.h>
#include <stdlib.h>

int main(int argc, char *argv[]) {
    if (argc == 1) {
        printf("0\n");
        return 0;
    }

    double sum = 0.0;
    for (int i = 1; i < argc; i++) {
        sum += atof(argv[i]);
    }

    printf("%.3lf\n", sum);

    return 0;
}

Aplicația 6.10: Să se scrie un program denumit criptare, care criptează/decriptează un text primit în linia de
comandă. Programul va fi apelat în felul următor: ./criptare operatie cheie cuvant1 cuvant2 ...
Operația poate fi enc pentru criptare sau dec decriptare. Cheia este un număr întreg. Algoritmul de criptare este
următorul: pentru fiecare literă din cuvinte se consideră codul său ASCII, la care se adună cheia specificată,
rezultând un nou cod ASCII, cel al literei criptate. Adunarea este circulară, adică ‘z’ incrementat cu 1 devine ‘a’.
Decriptarea este inversă: din cuvintele criptate se scade circular cheia specificată. Literele mari se transformă la
început în litere mici.
Exemple:
./criptare enc 1 zaraza -> absbab
./criptare dec 1 bcfdfebs -> abecedar
./criptare enc 10 vine VINE primavara PRImaVAra -> fsxo fsxo zbswkfkbk zbswkfkbk

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

void criptare(char *op, int key, char *text) {
    int len = strlen(text);
    if (strcmp(op, "enc") == 0) {
        for (int i = 0; i < len; i++) {
            if (isalpha(text[i])) {
                if (isupper(text[i])) {
                    text[i] = ((text[i] - 'A' + key) % 26) + 'A';
                } else if (islower(text[i])) {
                    text[i] = ((text[i] - 'a' + key) % 26) + 'a';
                }
            }
        }
    } else if (strcmp(op, "dec") == 0) {
        for (int i = 0; i < len; i++) {
            if (isalpha(text[i])) {
                if (isupper(text[i])) {
                    text[i] = ((text[i] - 'A' - key + 26) % 26) + 'A';
                } else if (islower(text[i])) {
                    text[i] = ((text[i] - 'a' - key + 26) % 26) + 'a';
                }
            }
        }
    }
}

int main(int argc, char *argv[]) {
    if (argc < 4) {
        printf("Usage: %s enc|dec key word1 word2 ...\n", argv[0]);
        return 1;
    }

    char *op = argv[1];
    int key = atoi(argv[2]);

    for (int i = 3; i < argc; i++) {
        criptare(op, key, argv[i]);
        printf("%s ", argv[i]);
    }
    printf("\n");

    return 0;
}

Aplicația 6.11: Un program primește în linia de comandă o expresie formată din numere reale și operatorii {addadunare, sub-scădere, mul-înmulțire, div-împărțire}. Programul va calcula valoarea expresiei și va afișa rezultatul.
Expresia se calculează de la stânga la dreapta, fără a ține cont de precedența matematică a operatorilor.
Exemplu: ./calcul 10.5 add 1.5 div 3 va afișa: 4

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main(int argc, char *argv[]) {
    if (argc < 4 || argc % 2 != 0) {
        printf("Usage: %s <numar> <op1> <numar> <op2> ... <numar>\n", argv[0]);
        return 1;
    }

    double result = atof(argv[1]);
    for (int i = 2; i < argc - 1; i += 2) {
        if (strcmp(argv[i], "add") == 0) {
            result += atof(argv[i + 1]);
        } else if (strcmp(argv[i], "sub") == 0) {
            result -= atof(argv[i + 1]);
        } else if (strcmp(argv[i], "mul") == 0) {
            result *= atof(argv[i + 1]);
        } else if (strcmp(argv[i], "div") == 0) {
            double divisor = atof(argv[i + 1]);
            if (divisor != 0) {
                result /= divisor;
            } else {
                printf("Error: Division by zero!\n");
                return 1;
            }
        } else {
            printf("Error: Invalid operator '%s'!\n", argv[i]);
            return 1;
        }
    }

    printf("%.2lf\n", result);
    return 0;
}


Aplicația 6.12: Un program primește în linia de comandă o serie de opțiuni și de cuvinte, mixate între ele. Opțiunile
specifică operații care se execută asupra cuvintelor. Opțiunile încep cu - (minus) și pot fi: u-transformă toate literele
cuvintelor în majuscule; f-transformă prima literă în majusculă și următoarele în minuscule; r-inversează literele din
cuvinte. După fiecare cuvânt se resetează toate opțiunile anterioare. Să se afișeze cuvintele primite în linia de
comandă cu transformările aplicate.
Exemplu: ./procesare -f mAria -r -u abac va afișa: Maria CABA

#include <stdio.h>
#include <string.h>
#include <ctype.h>

void apply_options(char *word, int upper, int first_upper, int reverse) {
    int len = strlen(word);
    if (reverse) {
        for (int i = 0; i < len / 2; i++) {
            char temp = word[i];
            word[i] = word[len - i - 1];
            word[len - i - 1] = temp;
        }
    }
    if (first_upper) {
        word[0] = toupper(word[0]);
        for (int i = 1; i < len; i++) {
            word[i] = tolower(word[i]);
        }
    }
    if (upper) {
        for (int i = 0; i < len; i++) {
            word[i] = toupper(word[i]);
        }
    }
}

int main(int argc, char *argv[]) {
    int upper = 0, first_upper = 0, reverse = 0;

    for (int i = 1; i < argc; i++) {
        if (argv[i][0] == '-') {
            upper = first_upper = reverse = 0;
            for (int j = 1; argv[i][j]; j++) {
                if (argv[i][j] == 'u') {
                    upper = 1;
                } else if (argv[i][j] == 'f') {
                    first_upper = 1;
                } else if (argv[i][j] == 'r') {
                    reverse = 1;
                } else {
                    printf("Invalid option '%c'\n", argv[i][j]);
                    return 1;
                }
            }
        } else {
            apply_options(argv[i], upper, first_upper, reverse);
            printf("%s ", argv[i]);
        }
    }
    printf("\n");

    return 0;
}

Aplicația 6.13: Un program primește în linia de comandă ca prim argument un cod de operație și pe urmă o serie
de cuvinte. Codul poate fi: 0-afișează numărul total de litere din toate cuvintele: 1-afișează fiecare literă de câte ori
apare în toate cuvintele.
Exemplu: ./statistica 0 ion merge la film va afișa: 14

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

void count_letters(char *word, int *letter_count) {
    int len = strlen(word);
    for (int i = 0; i < len; i++) {
        if (isalpha(word[i])) {
            letter_count[tolower(word[i]) - 'a']++;
        }
    }
}

int main(int argc, char *argv[]) {
    if (argc < 2) {
        printf("Usage: %s <operation> <word1> <word2> ...\n", argv[0]);
        return 1;
    }

    int operation = atoi(argv[1]);
    if (operation != 0 && operation != 1) {
        printf("Invalid operation: %d\n", operation);
        return 1;
    }

    int total_letters = 0;
    int letter_count[26] = {0};

    for (int i = 2; i < argc; i++) {
        if (operation == 0) {
            total_letters += strlen(argv[i]);
        } else {
            count_letters(argv[i], letter_count);
        }
    }

    if (operation == 0) {
        printf("%d\n", total_letters);
    } else {
        printf("Letter counts:\n");
        for (int i = 0; i < 26; i++) {
            if (letter_count[i] > 0) {
                printf("%c: %d\n", 'a' + i, letter_count[i]);
            }
        }
    }

    return 0;
}
